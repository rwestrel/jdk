#
# Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

$(eval $(call IncludeCustomExtension, hotspot/lib/JvmFeatures.gmk))

################################################################################
# Setup CFLAGS and EXCLUDES for the libjvm compilation, depending on which
# jvm features are selected for this jvm variant.

ifeq ($(call check-jvm-feature, compiler1), true)
  JVM_CFLAGS_FEATURES += -DCOMPILER1
else
  JVM_EXCLUDE_PATTERNS += c1_ c1/
endif

ifeq ($(call check-jvm-feature, compiler2), true)
  JVM_CFLAGS_FEATURES += -DCOMPILER2
  ifeq ($(call check-jvm-feature, leyden), false)
    JVM_SRC_DIRS += $(JVM_VARIANT_OUTPUTDIR)/gensrc/adfiles
  endif
else
  JVM_EXCLUDES += opto libadt
  JVM_EXCLUDE_FILES += bcEscapeAnalyzer.cpp ciTypeFlow.cpp
  JVM_EXCLUDE_PATTERNS += c2_ runtime_ /c2/
endif

ifeq ($(call check-jvm-feature, compiler1), false)
  ifeq ($(call check-jvm-feature, compiler2), false)
#    JVM_EXCLUDE_PATTERNS += ci/ compiler/
  endif
endif

ifeq ($(call check-jvm-feature, leyden), true)
  JVM_CFLAGS_FEATURES += -DLEYDEN
  JVM_EXCLUDES += ci 
  JVM_EXCLUDES += libadt
  JVM_EXCLUDE_FILES += bcEscapeAnalyzer.cpp ciTypeFlow.cpp
  JVM_EXCLUDE_PATTERNS += c2_ runtime_ /c2/
  #compiledMethod.cpp  codeBlob.cpp  codeBuffer.cpp oopMap.cpp abstractDisassembler.cpp disassembler.cpp  /scopeDesc.cpp  /exceptionHandlerTable.cpp  /frame_x86.cpp  /register_definitions_x86.cpp  /vmreg_x86.cpp   /jvm.cpp  /arguments.cpp  /compressedStream.cpp  /debugInfo.cpp  /location.cpp /pcDesc.cpp  /dictionary.cpp   /threadIdTable.cpp  /threadService.cpp  /register_x86.cpp  /vmClasses.cpp  /symbolTable.cpp  /relocInfo.cpp  /rdtsc_x86.cpp  /lowMemoryDetector.cpp  /memoryService.cpp  /memoryManager.cpp  /gcNotifier.cpp  /logConfiguration.cpp  /logDiagnosticCommand.cpp  /diagnosticFramework.cpp  /diagnosticArgument.cpp   /assembler.cpp
  JVM_EXCLUDE_FILES += /barrierSetAssembler_x86.cpp /barrierSetNMethod.cpp /cardTableBarrierSetAssembler_x86.cpp /compiledIC_x86.cpp /barrierSetNMethod_x86.cpp /deoptimization.cpp /icBuffer_x86.cpp /macroAssembler_x86.cpp /macroAssembler_x86_aes.cpp /macroAssembler_x86_cos.cpp /macroAssembler_x86_exp.cpp /macroAssembler_x86_log.cpp /macroAssembler_x86_log10.cpp /macroAssembler_x86_md5.cpp /macroAssembler_x86_pow.cpp /macroAssembler_x86_sha.cpp /macroAssembler_x86_sin.cpp /macroAssembler_x86_tan.cpp /methodHandles_x86.cpp /modRefBarrierSetAssembler_x86.cpp /templateInterpreterGenerator_x86.cpp /templateTable_x86.cpp /assembler_linux_x86.cpp /whitebox.cpp /diagnosticCommand.cpp /accessBarrierSupport.cpp /bytecodeAssembler.cpp /classFileParser.cpp /cpCache.cpp /defaultMethods.cpp /classLoaderHierarchyDCmd.cpp /classLoaderStats.cpp /fieldLayoutBuilder.cpp /classFileStream.cpp /methodData.cpp /generateOopMap.cpp /sweeper.cpp /relocator.cpp /codeHeapState.cpp /debugInfoRec.cpp /dependencies.cpp /dependencyContext.cpp /icBuffer.cpp /oopRecorder.cpp /stubs.cpp /abstractInterpreter_x86.cpp /compiledIC_aot_x86_64.cpp /interpreterRT_x86_64.cpp /jniFastGetField_x86_64.cpp /runtime_x86_64.cpp /sharedRuntime_x86_64.cpp /stubGenerator_x86_64.cpp /stubRoutines_x86_64.cpp /templateInterpreterGenerator_x86_64.cpp /universalNativeInvoker_x86_64.cpp /universalUpcallHandler_x86_64.cpp /vtableStubs_x86_64.cpp /c1_CodeStubs_x86.cpp /c1_FpuStackSim_x86.cpp /c1_FrameMap_x86.cpp /c1_LinearScan_x86.cpp /c1_LIRAssembler_x86.cpp /c1_LIRGenerator_x86.cpp /c1_LIR_x86.cpp /c1_MacroAssembler_x86.cpp /c1_Runtime1_x86.cpp /c2_init_x86.cpp /c2_intelJccErratum_x86.cpp /c2_MacroAssembler_x86.cpp /c2_safepointPollStubTable_x86.cpp /depChecker_x86.cpp /foreign_globals_x86.cpp /icache_x86.cpp /interp_masm_x86.cpp /jvmciCodeInstaller_x86.cpp /sharedRuntime_x86.cpp /stubRoutines_x86.cpp /foreign_globals.cpp /register.cpp /abstractCompiler.cpp /compilationPolicy.cpp /compileBroker.cpp /compileLog.cpp /compilerDefinitions.cpp /compilerDirectives.cpp /compilerEvent.cpp /compilerOracle.cpp /compileTask.cpp /directivesParser.cpp /methodLiveness.cpp /methodMatcher.cpp /icache.cpp /methodHandles.cpp /bootstrapInfo.cpp /bytecodeHistogram.cpp /bytecodes.cpp /bytecodeStream.cpp /bytecodeTracer.cpp /bytecodeUtils.cpp /interpreter.cpp /interpreterRuntime.cpp /invocationCounter.cpp /oopMapCache.cpp /rewriter.cpp /templateInterpreter.cpp /templateInterpreterGenerator.cpp /templateTable.cpp /abstractInterpreter.cpp /bytecode.cpp /linkResolver.cpp /attachListener.cpp /classLoadingService.cpp /heapDumperCompression.cpp /heapDumper.cpp /mallocSiteTable.cpp /mallocTracker.cpp /memBaseline.cpp /memReporter.cpp /memTracker.cpp /nmtCommon.cpp /nmtDCmd.cpp /runtimeService.cpp /threadStackTracker.cpp /virtualMemoryTracker.cpp /writeableFlags.cpp /classFileError.cpp /klassFactory.cpp /loaderConstraints.cpp /metadataOnStackMark.cpp /metaspaceDCmd.cpp /methodComparator.cpp /methodCounters.cpp /nativeLookup.cpp /notificationThread.cpp /os_perf_linux.cpp /parallelCleaning.cpp /parserTests.cpp /placeholders.cpp /reflection.cpp /resolutionErrors.cpp /resolvedMethodTable.cpp /scavengableNMethods.cpp /stackMapTable.cpp /stringDedupTable.cpp /stringDedup.cpp /stringDedupThread.cpp /stackMapFrame.cpp /universalNativeInvoker.cpp /universalUpcallHandler.cpp /upcallStubs.cpp /vectorSupport.cpp /cdsoffsets.cpp /foreign_globals.cpp /forte.cpp /jniCheck.cpp  /jniFastGetField.cpp /jvmtiClassFileReconstituter.cpp /jvmtiCodeBlobEvents.cpp /jvmtiDeferredUpdates.cpp /jvmtiEnvBase.cpp /jvmtiEnv.cpp /jvmtiEnvThreadState.cpp /jvmtiEventController.cpp /jvmtiExport.cpp /jvmtiExtensions.cpp /jvmtiGetLoadedClasses.cpp /jvmtiImpl.cpp /jvmtiManageCapabilities.cpp /jvmtiRawMonitor.cpp /jvmtiRedefineClasses.cpp /jvmtiTagMap.cpp /jvmtiTagMapTable.cpp /jvmtiThreadState.cpp /jvmtiTrace.cpp /jvmtiUtil.cpp /methodComparator.cpp /methodHandles.cpp /nativeEntryPoint.cpp /nativeLookup.cpp /perf.cpp /resolvedMethodTable.cpp /universalNativeInvoker.cpp /universalUpcallHandler.cpp /upcallStubs.cpp /vectorSupport.cpp /whitebox.cpp /verificationType.cpp /verifier.cpp /vframeArray.cpp /vmIntrinsics.cpp /reflectionUtils.cpp /compiledICHolder.cpp /systemDictionaryShared.cpp /reflectionAccessorImplKlassHelper.cpp /fieldStreams.cpp  /fieldInfo.cpp /macroAssembler_x86_arrayCopy_avx3.cpp /rtmLocking.cpp /addnode.cpp /arraycopynode.cpp /block.cpp /buildOopMap.cpp /bytecodeInfo.cpp /c2compiler.cpp /callGenerator.cpp /callnode.cpp /castnode.cpp /cfgnode.cpp /chaitin.cpp /classes.cpp /coalesce.cpp /compile.cpp /connode.cpp /constantTable.cpp /convertnode.cpp /countbitsnode.cpp /divnode.cpp /doCall.cpp /domgraph.cpp /escape.cpp /gcm.cpp /generateOptoStub.cpp /graphKit.cpp /idealGraphPrinter.cpp /idealKit.cpp /ifg.cpp /ifnode.cpp /indexSet.cpp /intrinsicnode.cpp /lcm.cpp /library_call.cpp /live.cpp /locknode.cpp /loopnode.cpp /loopopts.cpp /loopPredicate.cpp /loopTransform.cpp /loopUnswitch.cpp /machnode.cpp /macroArrayCopy.cpp /macro.cpp /matcher.cpp /mathexactnode.cpp /memnode.cpp /movenode.cpp /mulnode.cpp /multnode.cpp /narrowptrnode.cpp /node.cpp /opaquenode.cpp /opcodes.cpp /output.cpp /parse1.cpp /parse2.cpp /parse3.cpp /parseHelper.cpp /phase.cpp /phaseX.cpp /postaloc.cpp /regalloc.cpp /regmask.cpp /reg_split.cpp /replacednodes.cpp /rootnode.cpp /split_if.cpp /stringopts.cpp /subnode.cpp /subtypenode.cpp /superword.cpp /type.cpp /vector.cpp /vectorIntrinsics.cpp /vectornode.cpp /relocinfo.cpp
  #JVM_EXCLUDE_PATTERNS += 
endif


ifeq ($(call check-jvm-feature, zero), true)
  JVM_EXCLUDES += opto libadt
  JVM_EXCLUDE_PATTERNS += c1_ c1/ c2_ runtime_ /c2/
  JVM_EXCLUDE_FILES += templateInterpreter.cpp templateInterpreterGenerator.cpp \
                       bcEscapeAnalyzer.cpp ciTypeFlow.cpp
  JVM_CFLAGS_FEATURES += -DZERO -DZERO_LIBARCH='"$(OPENJDK_TARGET_CPU_LEGACY_LIB)"' $(LIBFFI_CFLAGS)
  JVM_LIBS_FEATURES += $(LIBFFI_LIBS)
  ifeq ($(ENABLE_LIBFFI_BUNDLING), true)
    JVM_LDFLAGS_FEATURES += $(call SET_EXECUTABLE_ORIGIN,/..)
  endif
else
  JVM_EXCLUDE_PATTERNS += /zero/
endif

ifeq ($(JVM_VARIANT), custom)
  JVM_CFLAGS_FEATURES += -DVMTYPE=\"Custom\"
endif

ifeq ($(call check-jvm-feature, minimal), true)
  JVM_CFLAGS_FEATURES += -DMINIMAL_JVM -DVMTYPE=\"Minimal\"
  ifeq ($(call isTargetOs, linux), true)
    # Override the default -g with a more liberal strip policy for the minimal JVM
    JVM_STRIPFLAGS := --strip-unneeded
  endif
endif

ifeq ($(call check-jvm-feature, dtrace), true)
  JVM_CFLAGS_FEATURES += -DDTRACE_ENABLED
endif

ifeq ($(call check-jvm-feature, static-build), true)
  JVM_CFLAGS_FEATURES += -DSTATIC_BUILD=1
endif

ifneq ($(call check-jvm-feature, jvmti), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_JVMTI=0
  JVM_EXCLUDE_FILES += jvmtiGetLoadedClasses.cpp jvmtiThreadState.cpp jvmtiExtensions.cpp \
      jvmtiImpl.cpp jvmtiManageCapabilities.cpp jvmtiRawMonitor.cpp jvmtiUtil.cpp jvmtiTrace.cpp \
      jvmtiCodeBlobEvents.cpp jvmtiEnv.cpp jvmtiRedefineClasses.cpp jvmtiEnvBase.cpp jvmtiEnvThreadState.cpp \
      jvmtiTagMap.cpp jvmtiEventController.cpp evmCompat.cpp jvmtiEnter.xsl jvmtiExport.cpp \
      jvmtiClassFileReconstituter.cpp jvmtiTagMapTable.cpp
endif

ifneq ($(call check-jvm-feature, jvmci), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_JVMCI=0
  JVM_EXCLUDES += jvmci
  JVM_EXCLUDE_FILES += jvmciCodeInstaller_$(HOTSPOT_TARGET_CPU_ARCH).cpp
endif

ifneq ($(call check-jvm-feature, vm-structs), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_VM_STRUCTS=0
  JVM_EXCLUDE_FILES += vmStructs.cpp
endif

ifneq ($(call check-jvm-feature, jni-check), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_JNI_CHECK=0
  JVM_EXCLUDE_FILES += jniCheck.cpp
endif

ifneq ($(call check-jvm-feature, services), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_SERVICES=0
  JVM_EXCLUDE_FILES += heapDumper.cpp heapInspection.cpp \
      attachListener_$(HOTSPOT_TARGET_OS).cpp attachListener.cpp
endif

ifneq ($(call check-jvm-feature, management), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_MANAGEMENT=0
endif

ifneq ($(call check-jvm-feature, cds), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_CDS=0
  JVM_EXCLUDE_FILES += \
      archiveBuilder.cpp \
      archiveUtils.cpp \
      classListParser.cpp \
      classLoaderDataShared.cpp \
      classLoaderExt.cpp \
      cppVtables.cpp \
      dumpAllocStats.cpp \
      dynamicArchive.cpp \
      filemap.cpp \
      heapShared.cpp \
      lambdaFormInvokers.cpp \
      metaspaceShared.cpp \
      metaspaceShared_$(HOTSPOT_TARGET_CPU).cpp \
      metaspaceShared_$(HOTSPOT_TARGET_CPU_ARCH).cpp \
      sharedClassUtil.cpp \
      sharedPathsMiscInfo.cpp \
      systemDictionaryShared.cpp
endif

ifneq ($(call check-jvm-feature, nmt), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_NMT=0
  JVM_EXCLUDE_FILES += \
      memBaseline.cpp memReporter.cpp mallocTracker.cpp virtualMemoryTracker.cpp nmtCommon.cpp \
      memTracker.cpp nmtDCmd.cpp mallocSiteTable.cpp threadStackTracker.cpp
endif

ifneq ($(call check-jvm-feature, aot), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_AOT=0
  JVM_EXCLUDE_FILES += \
      compiledIC_aot_x86_64.cpp compiledIC_aot_aarch64.cpp      \
      compilerRuntime.cpp aotCodeHeap.cpp aotCompiledMethod.cpp \
      aotLoader.cpp compiledIC_aot.cpp
endif

ifneq ($(call check-jvm-feature, g1gc), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_G1GC=0
  JVM_EXCLUDE_PATTERNS += gc/g1
endif

ifneq ($(call check-jvm-feature, parallelgc), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_PARALLELGC=0
  JVM_EXCLUDE_PATTERNS += gc/parallel
endif

ifneq ($(call check-jvm-feature, serialgc), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_SERIALGC=0
  JVM_EXCLUDE_PATTERNS += gc/serial
endif

ifneq ($(call check-jvm-feature, epsilongc), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_EPSILONGC=0
  JVM_EXCLUDE_PATTERNS += gc/epsilon
endif

ifneq ($(call check-jvm-feature, zgc), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_ZGC=0
  JVM_EXCLUDE_PATTERNS += gc/z
endif

ifneq ($(call check-jvm-feature, shenandoahgc), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_SHENANDOAHGC=0
  JVM_EXCLUDE_PATTERNS += gc/shenandoah
endif

ifneq ($(call check-jvm-feature, jfr), true)
  JVM_CFLAGS_FEATURES += -DINCLUDE_JFR=0
  JVM_EXCLUDE_PATTERNS += jfr
  JVM_EXCLUDE_FILES += compilerEvent.cpp
endif

################################################################################

ifeq ($(call check-jvm-feature, link-time-opt), true)
  # NOTE: Disable automatic opimization level and let the explicit cflag control
  # optimization level instead. This activates O3 on slowdebug builds, just
  # like the old build, but it's probably not right.
  JVM_OPTIMIZATION :=
  JVM_CFLAGS_FEATURES += -O3 -flto
  JVM_LDFLAGS_FEATURES += -O3 -flto -fuse-linker-plugin -fno-strict-aliasing
endif

ifeq ($(call check-jvm-feature, opt-size), true)
  JVM_OPTIMIZATION := SIZE
  OPT_SPEED_SRC := \
      allocation.cpp \
      assembler.cpp \
      barrierSet.cpp \
      basicLock.cpp \
      biasedLocking.cpp \
      bytecode.cpp \
      bytecodeInterpreter.cpp \
      c1_Compilation.cpp \
      c1_Compiler.cpp \
      c1_GraphBuilder.cpp \
      c1_LinearScan.cpp \
      c1_LIR.cpp \
      ciEnv.cpp \
      ciObjectFactory.cpp \
      codeBlob.cpp \
      constantPool.cpp \
      constMethod.cpp \
      classLoader.cpp \
      classLoaderData.cpp \
      classFileParser.cpp \
      classFileStream.cpp \
      cpCache.cpp \
      defNewGeneration.cpp \
      frame_arm.cpp \
      frame_aarch64.cpp \
      frame_ppc.cpp \
      frame_s390.cpp \
      frame_x86.cpp \
      genCollectedHeap.cpp \
      generation.cpp \
      genMarkSweep.cpp \
      growableArray.cpp \
      handles.cpp \
      hashtable.cpp \
      heap.cpp \
      icache.cpp \
      icache_arm.cpp \
      icache_aarch64.cpp \
      icache_ppc.cpp \
      icache_s390.cpp \
      icache_x86.cpp \
      instanceKlass.cpp \
      invocationCounter.cpp \
      iterator.cpp \
      javaCalls.cpp \
      javaClasses.cpp \
      jniFastGetField_arm.cpp \
      jvm.cpp \
      linkResolver.cpp \
      klass.cpp \
      klassVtable.cpp \
      markSweep.cpp \
      memRegion.cpp \
      memoryPool.cpp \
      method.cpp \
      methodHandles.cpp \
      methodHandles_arm.cpp \
      methodLiveness.cpp \
      metaspace.cpp \
      mutex.cpp \
      mutexLocker.cpp \
      nativeLookup.cpp \
      objArrayKlass.cpp \
      os_linux.cpp \
      os_linux_arm.cpp \
      resourceArea.cpp \
      rewriter.cpp \
      sharedRuntime.cpp \
      signature.cpp \
      space.cpp \
      stackMapTable.cpp \
      symbolTable.cpp \
      systemDictionary.cpp \
      symbol.cpp \
      synchronizer.cpp \
      timer.cpp \
      typeArrayKlass.cpp \
      unsafe.cpp \
      utf8.cpp \
      vmSymbols.cpp \
      #

  $(foreach s, $(OPT_SPEED_SRC), \
      $(eval BUILD_LIBJVM_$s_OPTIMIZATION := HIGHEST_JVM))

  ifneq ($(filter $(TOOLCHAIN_TYPE), gcc clang), )
    BUILD_LIBJVM_systemDictionary.cpp_CXXFLAGS := -fno-optimize-sibling-calls
  endif
endif
